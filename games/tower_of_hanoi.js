/*
@title: tower_of_hanoi
@author: nicholasz2510
*/


const post = "p";
const loop1 = "1";
const loop2 = "2";
const loop3 = "3";
const selected = "s"; 

let indexSelected = 0;
let wantMove = false;
let posts = [[2, 1, 0], [], []];
const types = ["3", "2", "1"];

setLegend(
  [ post, bitmap`
................
................
.......CL.......
.......CL.......
.......CL.......
.......CL.......
.......CL.......
.......CL.......
.......CL.......
.......CL.......
.......CL.......
.......CL.......
.......CL.......
.......CL.......
.CCCCCCCCCCCCCC.
................`],
  [ loop1, bitmap`
................
................
................
................
................
................
................
................
................
................
................
...4444444444...
..4..........4..
...4444444444...
................
................`],
  [ loop2, bitmap`
................
................
................
................
................
................
................
.....555555.....
....5......5....
.....555555.....
................
................
................
................
................
................`],
  [ loop3, bitmap`
................
................
................
......8888......
.....8....8.....
......8888......
................
................
................
................
................
................
................
................
................
................`],
  [ selected, bitmap`
................
................
.......3L.......
.......3L.......
.......3L.......
.......3L.......
.......3L.......
.......3L.......
.......3L.......
.......3L.......
.......3L.......
.......3L.......
.......3L.......
.......3L.......
.33333333333333.
................`]
);
const currentLevel = map`
ppp`

addText("ASD to select tower", {x: 0, y: 5});
addText("Press J to start", {x: 0, y: 8});

function clearSelection() {
  let tiles = getAll("s");
  for (let i = 0; i < tiles.length; i++) {
    let currSprite = tiles[i];
    currSprite.type = "p";
  }
}

function select(j) {
  let currTile = getTile(j,0);
  for (let i = 0; i < currTile.length; i++) {
    let currSprite = currTile[i];
    if (currSprite.type == "p") {
      currSprite.type = "s";
    }
  }
  indexSelected = j;
}

function move(j, k) {
  if (posts[j][posts[j].length - 1] > posts[k][posts[k].length - 1]) {
    return false;
  } else if (posts[j].length == 0) {
    return false;
  }
  
  let removed = posts[j].pop();
  posts[k].push(removed);
  let movedSprite = getFirst(types[removed]);
  movedSprite.x = k;
  return true;
}

onInput("j", () => {
  clearText();
  setMap(currentLevel);
  addSprite(0,0,loop1);
  addSprite(0,0,loop2);
  addSprite(0,0,loop3);
  select(0);
  let wantMove = false;
  let posts = [[2, 1, 0], [], []];
});

onInput("a", () => {
  let prevIndexSelected = indexSelected;
  clearSelection();
  select(0);
  if (wantMove) {
    let success = move(prevIndexSelected, indexSelected);
    if (success) {
      wantMove = false;
    }
  } else {
    wantMove = true;
  }
});

onInput("s", () => {
  let prevIndexSelected = indexSelected;
  clearSelection();
  select(1);
  if (wantMove) {
    let success = move(prevIndexSelected, indexSelected);
    if (success) {
      wantMove = false;
    }
  } else {
    wantMove = true;
  }
});

onInput("d", () => {
  let prevIndexSelected = indexSelected;
  clearSelection();
  select(2);
  if (wantMove) {
    let success = move(prevIndexSelected, indexSelected);
    if (success) {
      wantMove = false;
    }
  } else {
    wantMove = true;
  }
});

afterInput(() => {
  if (posts[2].length == 3) { 
    addText("you win!", { y: 4, color: [255, 0, 0] });
  }
});
